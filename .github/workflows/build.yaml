name: Build Go Program for Multiple Platforms

on:
  push:
    tags:
      - 'v*' # 仅在推送标签时触发
env:
  OUTPUT_NAME: taiji
  
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, darwin] # 支持的操作系统
        arch: [amd64, arm64]         # 支持的架构
    steps:
      # Step 1: 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: 设置 Go 环境
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      # Step 3: 编译多个平台和架构的二进制
      - name: Cross-compile Go binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          mkdir -p dist
          output_name=${{ env.OUTPUT_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
          if [ "${{ matrix.os }}" == "windows" ]; then
            output_name="$output_name.exe"
          fi
          echo "Building $output_name for $GOOS/$GOARCH..."
          go build -o dist/$output_name . # 替换为你的主程序路径

      # Step 4: 上传所有构建产物
      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: go-binaries
          path: dist/
